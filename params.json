{"name":"GatlingCql","tagline":"Gatling support for Apache Cassandra CQL","body":"GatlingCql\r\n==========\r\n\r\nGatling DSL support for Apache Cassandra CQL\r\n\r\nFeatures\r\n--------\r\n\r\nBasic Gatling DSL for Apache Cassandra CQL, prepared statements are supported as well\r\n\r\n```scala\r\nclass CassandraSimulation extends Simulation {\r\n  val keyspace = \"test\"\r\n  val table_name = \"test_table\"\r\n  val session = Cluster.builder().addContactPoint(\"127.0.0.1\")\r\n                  .build().connect(s\"$keyspace\") //Your C* session\r\n  val cqlConfig = cql.session(session) //Initialize Gatling DSL with your session\r\n\r\n  //Setup\r\n  session.execute(s\"\"\"CREATE KEYSPACE IF NOT EXISTS $keyspace \r\n                      WITH replication = { 'class' : 'SimpleStrategy', \r\n                                          'replication_factor': '1'}\"\"\")\r\n  session.execute(s\"\"\"CREATE TABLE IF NOT EXISTS $table_name (\r\n          id timeuuid,\r\n          num int,\r\n          str text,\r\n          PRIMARY KEY (id)\r\n        );\r\n      \"\"\")\r\n  //It's generally not advisable to use secondary indexes in you schema\r\n  session.execute(f\"\"\"CREATE INDEX IF NOT EXISTS $table_name%s_num_idx \r\n                      ON $table_name%s (num)\"\"\")\r\n\r\n\r\n  //Prepare your statement, we want to be effective, right?\r\n  val prepared = session.prepare(s\"\"\"INSERT INTO $table_name \r\n                                      (id, num, str) \r\n                                      VALUES \r\n                                      (now(), ?, ?)\"\"\")\r\n\r\n  val random = new util.Random\r\n  val feeder = Iterator.continually( \r\n      // this feader will \"feed\" random data into our Sessions\r\n      Map(\r\n          \"randomString\" -> random.nextString(20), \r\n          \"randomNum\" -> random.nextInt()\r\n          ))\r\n\r\n  val scn = scenario(\"Two statements\").repeat(1) { //Name your scenario\r\n    feed(feeder)\r\n    .exec(cql(\"simple SELECT\") \r\n         // 'execute' can accept a string \r\n         // and understands Gatling expression language (EL), i.e. ${randomNum}\r\n        .execute(\"SELECT * FROM test_table WHERE num = ${randomNum}\")) \r\n    .exec(cql(\"prepared INSERT\")\r\n         // alternatively 'execute' accepts a prepared statement\r\n        .execute(prepared)\r\n         // you need to provide parameters for that (EL is supported as well)\r\n        .withParams(Integer.valueOf(random.nextInt()), \"${randomString}\")\r\n        // and set a ConsistencyLevel optionally\r\n        .consistencyLevel(ConsistencyLevel.ANY)) \r\n  }\r\n\r\n  setUp(scn.inject(rampUsersPerSec(10) to 100 during (30 seconds)))\r\n    .protocols(cqlConfig)\r\n}\r\n```\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n* Get a release TGZ\r\n* Unpack into Gatling folder: ``tar -xjf GatlingCql-0.0.2-SNAPSHOT-release.tar.gz -C gatling-charts-highcharts-2.0.0-RC5/``\r\n* Run Gatling and you should see ``cassandra.CassandraSimulation`` in your simulations list\r\n\r\nMore Information\r\n----------------\r\n* http://gatling.io/docs/2.0.0-RC5/quickstart.html\r\n* http://gatling.io/docs/2.0.0-RC5/cheat-sheet.html\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}